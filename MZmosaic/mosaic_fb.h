#if !defined MOSAIC_H
#define MOSAIC_H


#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<time.h>

#define NSTATE_AA 25
#define NSTATE_NT 5
#define SMALL -1e32

#define DEFAULT_REC 0.0001
#define DEFAULT_DEL 0.025
#define DEFAULT_EPS 0.75
#define DEFAULT_TERM 0.001
#define DEFAULT_PMATCH 0.0
#define DEFAULT_PIM 0.75

#define LLK_TOL 0.01
#define MAX_IT_EM 10

#define MIN_PROB 1e-32

long *idum;

		/*Amino acids - IUPAC convention

	    Abbreviation    Amino acid name
        ------------    ---------------
        
		???		? 0		 Missing data
        Ala     A 1      Alanine
        Arg     R 2      Arginine
        Asn     N 3      Asparagine
        Asp     D 4      Aspartic acid (Aspartate)
        Cys     C 5      Cysteine
        Gln     Q 6      Glutamine
        Glu     E 7      Glutamic acid (Glutamate)
        Gly     G 8      Glycine
        His     H 9      Histidine
        Ile     I 10     Isoleucine
        Leu     L 11     Leucine
        Lys     K 12     Lysine
        Met     M 13     Methionine
        Phe     F 14     Phenylalanine
        Pro     P 15     Proline
        Ser     S 16     Serine
        Thr     T 17     Threonine
        Trp     W 18     Tryptophan
        Tyr     Y 19     Tyrosine
        Val     V 20     Valine
        Asx     B 21     Aspartic acid or Asparagine
        Glx     Z 22     Glutamine or Glutamic acid.
        Xaa     X 23     Any amino acid.
        TERM    * 24     termination codon

*/

/*For amino acids*/

double emiss_gap_aa[NSTATE_AA]={-3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825};

double emiss_match_aa[NSTATE_AA][NSTATE_AA]=\
{{-3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825, -3.218875825},\
{-3.218875825, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031, -5.032614201},\
{-3.218875825, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -5.032614201, -0.210721031}};


/*
For nucleotides

	NUC		NUM
	---		---
	?		0
	T		1
	C		2
	A		3
	G		4
*/


double emiss_gap_nt[NSTATE_NT]={0.2, 0.2, 0.2, 0.2, 0.2};

double emiss_match_nt[NSTATE_NT][NSTATE_NT]=\
{{0.2, 0.2, 0.2, 0.2, 0.2},\
{ 0.2, 0.9,   0.05,  0.025, 0.025},\
{ 0.2, 0.05,  0.9,   0.025, 0.025},\
{ 0.2, 0.025, 0.025, 0.9,   0.05,},\
{ 0.2, 0.025, 0.025, 0.05,  0.9,}};


/*Structures*/

/*Stores all matrices - don't want to allocate them all the time*/
struct matrices {

	double ***m1_m;
	double ***m1_i;
	double ***m1_d;
	double ***m2_m;
	double ***m2_i;
	double ***m2_d;

	int *who_copy;

	int *maxpath_copy;
	int *maxpath_state;
	int *maxpath_pos;
	double *ppsum_match;
	double **ppsum_state;

	int maxl;
	double llk;

	double tb_divisor;

	/*For EM*/
	double	**expected_transitions, **expected_emissions;

};



/*Function declarations*/

struct pars * get_pars(int argc, char *argv[]);
void kalign_fb(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target, int fonly);
struct data * add_null_term(struct data *my_data);
void classify_sequences(struct pars *my_pars, struct data *my_data);
struct matrices * allocate_matrices(struct data *my_data, struct pars *my_pars);
void deallocate_matrices(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices);
void print_max_acc_alignment(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target);
void print_posterior_matrices(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target);
void print_forward_matrices(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target, FILE *ofp);
void print_backward_matrices(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target, FILE *ofp);
void kalign_vt(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target);
void estimate_parameters_em_no_rec(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices);
void kalign_fb_no_rec(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target);
void calculate_expected_values(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices, int target);
void read_params_from_file(struct pars *my_pars, FILE *ifp);
void print_help(FILE *ofp);
void print_parameters(struct pars *my_pars, FILE *ofp);
void calculate_llk_over_rho_grid(struct data *my_data, struct pars *my_pars, struct matrices *my_matrices);
#endif


